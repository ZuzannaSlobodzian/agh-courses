mean(chain[-(1:burnIn),3])
sd(chain[-(1:burnIn),3])
##Klimat
library(httr)
library(jsonlite)
library(tseries)
install.packages('tseries')
x<-seq(1,100)
y<-3*x+4+rnorm(100,0,3)
plot(x,y)
#funkcja wiarygodności
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# to jest ważne - rozkłada a priori -> co przypuszczamy o parametrach
#tu trzeba będzie zmienić zakres w rozkładach (min i max)
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=0, max=10, log = T)
bprior = dunif(b, min=-5, max=5, log = T)
sdprior = dunif(sd, min=0, max=30, log = T)
return(aprior+bprior+sdprior)
}
#prawd. a posteriori
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
#funkcja propozycji tu ustalamy szerokość przeszukiwania
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.1,0.1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab <- exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
#to jest ważne: parametry startowe dla a,b i sd
startvalue = c(1,1,1)
#tutaj ważna jest ilość iteracji: 10000 to minimum
chain = run_metropolis_MCMC(startvalue, 10000)
#ilość elementów które będziemy pomijać na początku każdego łańcucha
burnIn = 5000
#procent przyjętych rozwiązań
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
#czy wsp. akceptacji jest dobry?
acceptance
#a jak to widzi zwykły model liniowy
summary(lm(y~x))
#jakie s� rok�ady naszych parametr�w
#a
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
#b
plot(density(chain[-(1:burnIn),2]))
mean(chain[-(1:burnIn),2])
sd(chain[-(1:burnIn),2])
#sd
plot(density(chain[-(1:burnIn),3]))
mean(chain[-(1:burnIn),3])
sd(chain[-(1:burnIn),3])
##Klimat
library(httr)
library(jsonlite)
library(tseries)
library(segmented)
install.packages('segmented')
x<-seq(1,100)
y<-3*x+4+rnorm(100,0,3)
plot(x,y)
#funkcja wiarygodności
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# to jest ważne - rozkłada a priori -> co przypuszczamy o parametrach
#tu trzeba będzie zmienić zakres w rozkładach (min i max)
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=0, max=10, log = T)
bprior = dunif(b, min=-5, max=5, log = T)
sdprior = dunif(sd, min=0, max=30, log = T)
return(aprior+bprior+sdprior)
}
#prawd. a posteriori
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
#funkcja propozycji tu ustalamy szerokość przeszukiwania
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.1,0.1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab <- exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
#to jest ważne: parametry startowe dla a,b i sd
startvalue = c(1,1,1)
#tutaj ważna jest ilość iteracji: 10000 to minimum
chain = run_metropolis_MCMC(startvalue, 10000)
#ilość elementów które będziemy pomijać na początku każdego łańcucha
burnIn = 5000
#procent przyjętych rozwiązań
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
#czy wsp. akceptacji jest dobry?
acceptance
#a jak to widzi zwykły model liniowy
summary(lm(y~x))
#jakie s� rok�ady naszych parametr�w
#a
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
#b
plot(density(chain[-(1:burnIn),2]))
mean(chain[-(1:burnIn),2])
sd(chain[-(1:burnIn),2])
#sd
plot(density(chain[-(1:burnIn),3]))
mean(chain[-(1:burnIn),3])
sd(chain[-(1:burnIn),3])
##Klimat
library(httr)
library(jsonlite)
library(tseries)
library(segmented)
# Ustawienie lokalizacji na angielską
Sys.setlocale("LC_ALL","English")
# Pobieranie danych pogodowych/klimatycznych dla Krakowa z API open-meteo
r <- GET("https://archive-api.open-meteo.com/v1/archive?latitude=50.06&longitude=19.56&start_date=1950-01-01&end_date=2022-12-31&daily=temperature_2m_max,temperature_2m_min,temperature_2m_mean,precipitation_sum,precipitation_hours,winddirection_10m_dominant&timezone=Europe%2FWarsaw",
Accept = "application/json")
jsonRespText <- content(r, as = "text")
aux <- fromJSON(jsonRespText)
# Tworzenie ramki danych dla danych pogodowych Krakowa
krakow <- data.frame(time = aux$daily$time,
t_2m_max = aux$daily$temperature_2m_max,
t_2m_min = aux$daily$temperature_2m_min,
t_2m_mean = aux$daily$temperature_2m_mean,
p_sum = aux$daily$precipitation_sum,
p_h = aux$daily$precipitation_hours,
w_d = aux$daily$winddirection_10m_dominant)
krakow$time <- as.Date(krakow$time)
summary(krakow)
day <- format(krakow$time, format = "%d")
month <- format(krakow$time, format = "%m")
year <- format(krakow$time, format = "%Y")
# Konwersja dnia, miesiąca i roku na liczbę
krakow$day <- as.numeric(day)
krakow$month <- as.numeric(month)
krakow$year <- as.numeric(year)
#policzmy średnie miesięczne dla opadów i temperatury średniej dla krakowa
t<-aggregate( t_2m_mean ~ month+ year , krakow , mean )
p<-aggregate( p_sum ~ month+ year , krakow , mean )
#R sortuje alfabetycznie dlatego musimy go przed tym powstrzymać
krakow_m<-merge(t,p,by=c("year","month"),sort=FALSE)
summary(krakow_m)
test_k<-krakow_m[krakow_m$month==7,]
plot(test_k$year,test_k$t_2m_mean)
x<-seq(1,100)
y<-3*x+4+rnorm(100,0,3)
plot(x,y)
#funkcja wiarygodności
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# to jest ważne - rozkłada a priori -> co przypuszczamy o parametrach
#tu trzeba będzie zmienić zakres w rozkładach (min i max)
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=0, max=10, log = T)
bprior = dunif(b, min=-5, max=5, log = T)
sdprior = dunif(sd, min=0, max=30, log = T)
return(aprior+bprior+sdprior)
}
#prawd. a posteriori
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
#funkcja propozycji tu ustalamy szerokość przeszukiwania
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.1,0.1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab <- exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
#to jest ważne: parametry startowe dla a,b i sd
startvalue = c(1,1,1)
#tutaj ważna jest ilość iteracji: 10000 to minimum
chain = run_metropolis_MCMC(startvalue, 10000)
#ilość elementów które będziemy pomijać na początku każdego łańcucha
burnIn = 5000
#procent przyjętych rozwiązań
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
#czy wsp. akceptacji jest dobry?
acceptance
#a jak to widzi zwykły model liniowy
summary(lm(y~x))
#jakie s� rok�ady naszych parametr�w
#a
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
#b
plot(density(chain[-(1:burnIn),2]))
mean(chain[-(1:burnIn),2])
sd(chain[-(1:burnIn),2])
#sd
plot(density(chain[-(1:burnIn),3]))
mean(chain[-(1:burnIn),3])
sd(chain[-(1:burnIn),3])
##Klimat
library(httr)
library(jsonlite)
library(tseries)
library(segmented)
# Ustawienie lokalizacji na angielską
Sys.setlocale("LC_ALL","English")
# Pobieranie danych pogodowych/klimatycznych dla Krakowa z API open-meteo
r <- GET("https://archive-api.open-meteo.com/v1/archive?latitude=50.06&longitude=19.56&start_date=1950-01-01&end_date=2022-12-31&daily=temperature_2m_max,temperature_2m_min,temperature_2m_mean,precipitation_sum,precipitation_hours,winddirection_10m_dominant&timezone=Europe%2FWarsaw",
Accept = "application/json")
jsonRespText <- content(r, as = "text")
aux <- fromJSON(jsonRespText)
# Tworzenie ramki danych dla danych pogodowych Krakowa
krakow <- data.frame(time = aux$daily$time,
t_2m_max = aux$daily$temperature_2m_max,
t_2m_min = aux$daily$temperature_2m_min,
t_2m_mean = aux$daily$temperature_2m_mean,
p_sum = aux$daily$precipitation_sum,
p_h = aux$daily$precipitation_hours,
w_d = aux$daily$winddirection_10m_dominant)
krakow$time <- as.Date(krakow$time)
summary(krakow)
#Wyodrębnienie dnia, miesiąca i roku z daty
day <- format(krakow$time, format = "%d")
month <- format(krakow$time, format = "%m")
year <- format(krakow$time, format = "%Y")
# Konwersja dnia, miesiąca i roku na liczbę
krakow$day <- as.numeric(day)
krakow$month <- as.numeric(month)
krakow$year <- as.numeric(year)
#policzmy średnie miesięczne dla opadów i temperatury średniej dla krakowa
t<-aggregate( t_2m_mean ~ month+ year , krakow , mean )
p<-aggregate( p_sum ~ month+ year , krakow , mean )
#R sortuje alfabetycznie dlatego musimy go przed tym powstrzymać
krakow_m<-merge(t,p,by=c("year","month"),sort=FALSE)
summary(krakow_m)
#we�my lipiec w krakowie
test_k<-krakow_m[krakow_m$month==7,]
plot(test_k$year,test_k$t_2m_mean)
#teraz coś czego jeszcze nie umiecie ale lepiej tak niż na oko :)
# Wykonanie analizy segmentowanej
library(segmented)
fit_lm = lm(t_2m_mean ~ year + 1, data = test_k)
plot(test_k$year,test_k$t_2m_mean)
lines(test_k$year,predict(fit_lm))
fit_segmented = segmented(fit_lm, seg.Z = ~ year, npsi = 1)
plot(test_k$year,test_k$t_2m_mean)
plot(fit_segmented,add=TRUE)
lines.segmented(fit_segmented)
points.segmented(fit_segmented)
print(fit_segmented$psi)
x<-test_k$year[test_k$year>=1978]
y<-test_k$t_2m_mean[test_k$year>=1978]
plot(x,y)
x<-seq(1,length(x))
summary(lm(y~x))
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=-1, max=1, log = T)
bprior = dunif(b, min=0, max=20, log = T)
sdprior = dunif(sd, min=0, max=30, log = T)
return(aprior+bprior+sdprior)
}
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.05,0.05,0.05)))
}
startvalue = c(0,16,1)
chain = run_metropolis_MCMC(startvalue, 10000)
burnIn = 5000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
acceptance
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
plot(density(chain[-(1:burnIn),2]))
mean(chain[-(1:burnIn),2])
sd(chain[-(1:burnIn),2])
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
x<-test_k$year[test_k$year<=1978]
y<-test_k$t_2m_mean[test_k$year<=1978]
plot(x,y)
x<-seq(1,length(x))
summary(lm(y~x))
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=-1, max=1, log = T)
bprior = dunif(b, min=0, max=20, log = T)
sdprior = dunif(sd, min=0, max=30, log = T)
return(aprior+bprior+sdprior)
}
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.05,0.05,0.05)))
}
startvalue = c(0,18,1)
chain = run_metropolis_MCMC(startvalue, 10000)
burnIn = 5000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
acceptance
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
plot(density(chain[-(1:burnIn),1]))
mean(chain[-(1:burnIn),1])
sd(chain[-(1:burnIn),1])
a <- 1
print(a)
b <- c(1, 3, 8)
print(b)
print(b, a)
print(b + a)
c <- "s"
print(c)
c <- 's'
print(c)
c <- 's gsjdn '
print(c)
for (i in range(1:10)) {
print(i)
}
for (i in range(c(1:10))) {
print(i)
}
for (i in 1:10) {
print(i)
}
for (i in b) {
print(i)
}
print(b + a)
b <- b + a
print(b)
for (i in b) {
print(i)
}
a <- 1
print(a)
b <- c(1, 3, 8)
print(b + a)
c <- 's gsjdn '
print(c)
for (i in 1:10) {
print(i)
}
for (i in b) {
print(i)
}
b <- b + a
print(b)
if(a == 1){
print("ok")
}
a <- 10
if(a == 1){
print("ok")
}
if(a == 1){
print("ok")
}
if else(a < 10){
if(a == 1){
print("ok")
}
else if(a < 10){
if(a == 1){
print("ok")
} else if (a < 10){
print("mniejsze")
} else if (a == 10){
print("równe")
} else{
print("nie pasuje")
}
if(a == 1){
print("ok")
}
else if (a < 10){
if(a == 1){
print("ok")
} else if (a < 10){
print("mniejsze")
} else if (a == 10){
print("równe")
} else{
print("nie pasuje")
}
j <- 0
while(j < 5){
print("tak")
j <- j + 1
}
for( j in 1:5){
print("tak")
}
for( j in 1:5){
print("tak")
}
#jest super
setwd("~/studia/semestr_4/modelowanie_w_naukach_o_Ziemi/Antarktyda")
matrix(NA, nrow = 0, ncol = 361)
matrix(1, nrow = 0, ncol = 361)
matrix(1, nrow = 2, ncol = 2)
data_new <- data.frame(matrix(1, nrow = 2, ncol = 2))
View(data_new)
View(data_new)
data_new <- data.frame(matrix(NA, nrow = 0, ncol = 361))
temp <- matrix(1, nrow = 3, ncol = 2)
View(temp)
View(temp)
data_new <- data.frame(temp)
colnames(data_new) <- seq(5:6)
View(temp)
View(temp)
View(data_new)
View(data_new)
colnames(data_new) <- seq(59:60:1)
colnames(data_new) <- seq(59:60)
View(data_new)
View(data_new)
colnames(data_new) <- c(59, 60)
motyle <- read.csv("daily_ice_edge.csv",header=TRUE,encoding="UTF-8")
View(motyle)
View(motyle)
print(motyle[motyle$Date == "07-Nov-1978"])
data_new[1,1] = 8
print(data_new[data_new$59 == 8])
print(data_new[data_new$"59" == 8])
print(data_new[ ,data_new$"59" == 8])
data_new[1,2] = 9
print(data_new[ ,data_new$"59" == 8])
print(data_new[data_new$"59" == 8, ])
print(data_new[data_new$"59" == 8,1 ])
print(data_new[data_new$"59" == 8,2 ])
print(motyle[motyle$Date == "07-Nov-1978", 1])
print(motyle[motyle$Date == "07-Nov-1978", ])
tt <- motyle[motyle$Date == "07-Nov-1978", ]
View(tt)
View(tt)
